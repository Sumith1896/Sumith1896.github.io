<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sumith</title>
 <link href="http://sumith1896.github.io//atom.xml" rel="self"/>
 <link href="http://sumith1896.github.io//"/>
 <updated>2015-06-05T14:08:40+00:00</updated>
 <id>http://sumith1896.github.io/</id>
 <author>
   <name>Sumith</name>
   <email>sumith1896@gmail.com</email>
 </author>

 
 <entry>
   <title>GSoC Progress - Week 1</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-1"/>
   <updated>2015-06-05T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-1</id>
   <content type="html">&lt;p&gt;Hi again, this post contains the first report of my GSoC progress, even though it&amp;#39;s week 2. &lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;I have completed the &lt;code&gt;UnivariatePolynomial&lt;/code&gt; implementation in &lt;a href=&quot;https://github.com/sympy/symengine/pull/454&quot;&gt;PR 454&lt;/a&gt;, the PR is ready to be merged and is up for final review. This &lt;code&gt;SymEngine&lt;/code&gt; class can handle univariate polynomials and can handle all the basic polynomial manipulation.&lt;/p&gt;

&lt;p&gt;The current functionality of &lt;code&gt;UnivariatePolynomial&lt;/code&gt; are:&lt;br/&gt;
* two constructors of &lt;code&gt;UnivariatePolynomial&lt;/code&gt; class, one using a &lt;code&gt;dict&lt;/code&gt; of degree to coefficient and other is using a dense vector of coefficients. Note that this implementation is sparse. &lt;br/&gt;
* printing, same output pattern as that of SymPy&lt;br/&gt;
* &lt;code&gt;from_dict&lt;/code&gt; which returns the appropriate &lt;code&gt;Basic&lt;/code&gt; type on passing the &lt;code&gt;dict&lt;/code&gt;&lt;br/&gt;
* &lt;code&gt;dict_add_term&lt;/code&gt; to add a new term to the &lt;code&gt;dict&lt;/code&gt;&lt;br/&gt;
* &lt;code&gt;max_coef()&lt;/code&gt;, &lt;code&gt;diff()&lt;/code&gt;, &lt;code&gt;eval()&lt;/code&gt; as the name suggests&lt;br/&gt;
* some bool check funtions to check specific cases like &lt;code&gt;is_zero()&lt;/code&gt;, &lt;code&gt;is_one()&lt;/code&gt;, etc.&lt;br/&gt;
* also the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;neg&lt;/code&gt; and &lt;code&gt;mul&lt;/code&gt; functions. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;What I learnt here was having a testing environment setup first speeds up the process of implementation and things go in the right direction.&lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;UnivariatePolynomial&lt;/code&gt; uses &lt;code&gt;std::map&lt;/code&gt;, I plan to switch to &lt;code&gt;std::unordered_map&lt;/code&gt; or other specialized data structures before benchmarking the class and comparing speeds so that we get a decent speed.&lt;br/&gt;
The, to be implemented, multivariate class will be called &lt;code&gt;Polynomial&lt;/code&gt;. Note that two classes are high level, because they can take part in SymPy expressions.&lt;/p&gt;

&lt;p&gt;The plan is to implement lower level classes with various data structures, as well as using Piranha. These lower level classes do not use RCP at all, thus they could be faster for some applications. The user could then call specialized classes if needed for a given application (if we implement any).&lt;/p&gt;

&lt;h3&gt;Targets for Week 2 and Week 3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implementation of the hashtable along with &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt; by this weekend.&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;code&gt;Polynomial&lt;/code&gt; using &lt;code&gt;gmp&lt;/code&gt; with Kronecker packing.&lt;br/&gt;
In the latter weeks, we&amp;#39;ll consider switching from packed structure to tuple and &lt;code&gt;int&lt;/code&gt; for small coefficients and &lt;code&gt;mpz_class&lt;/code&gt; for larger. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all for now. Catch you next week.&lt;br/&gt;
&lt;strong&gt;Adiós&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gearing up for GSoC</title>
   <link href="http://sumith1896.github.io//Gearing-up-for-GSoC"/>
   <updated>2015-05-25T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//Gearing-up-for-GSoC</id>
   <content type="html">&lt;p&gt;Greetings! The community bonding is officially closed now. It&amp;#39;s time for the coding period. I had promised myself a post every sunday from the 24th of May 2015 but seems like the first post is a bit late. &lt;/p&gt;

&lt;h3&gt;Community bonding&lt;/h3&gt;

&lt;p&gt;I had discussions with &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt; and &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt; about the big tasks in hand and how to go about handling the work. In the first discussion, we also assigned ourselves the first task that needs to be completed.&lt;br/&gt;
I have to:&lt;br/&gt;
* Clean up the necessary in the &lt;a href=&quot;https://github.com/sympy/symengine/pull/406&quot;&gt;PR&lt;/a&gt; Shivam had sent during his proposal period.&lt;br/&gt;
* Implement &lt;code&gt;sub_poly()&lt;/code&gt; and &lt;code&gt;mul_poly()&lt;/code&gt; with Kronecker substitution in a clean fashion.&lt;br/&gt;
Shivam agreed to finish &lt;code&gt;ring_series&lt;/code&gt; in &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;SymPy&lt;/a&gt; which he has already started working on.&lt;br/&gt;
Also together we decided to work on a faster hashtable implementation.&lt;br/&gt;
I also discussed with &lt;a href=&quot;https://github.com/sushant-hiray&quot;&gt;Sushant&lt;/a&gt; about the structure of the current &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; and cleared my doubts there.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;As a part of community bonding, I looked to some tools that I&amp;#39;ll be using. Certain C++11 constructs, visitor pattern, etc. Even though I am not thorough with it, I think learning it as I progress with the work is the best thing to do.&lt;/p&gt;

&lt;p&gt;Regarding the work I undertook in this period, is minimal, but here they are:&lt;br/&gt;
&lt;strong&gt;Issues&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/issues/443&quot;&gt;#443&lt;/a&gt;: Documentation of SymEngine.&lt;br/&gt;
&lt;strong&gt;Pull requests&lt;/strong&gt;&lt;br/&gt;
As I read through the code I felt some clean ups necesarry which were done in &lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/pull/444&quot;&gt;#444&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/symengine/pull/438&quot;&gt;#438&lt;/a&gt;: Pending&lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/pull/451&quot;&gt;#451&lt;/a&gt;, &lt;a href=&quot;https://github.com/sympy/symengine/pull/442&quot;&gt;#442&lt;/a&gt;, &lt;a href=&quot;https://github.com/sympy/symengine/pull/441&quot;&gt;#441&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/symengine/pull/440&quot;&gt;#440&lt;/a&gt;: Merged&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;In my proposal, I had promised &lt;a href=&quot;https://github.com/bluescarni/piranha&quot;&gt;Piranha&lt;/a&gt; audit but it didn&amp;#39;t happen in such a short period due to complex code. Best way to go forward was to start work for &lt;code&gt;Polynomial&lt;/code&gt;.&lt;br/&gt;
The work regarding &lt;code&gt;Polynomial&lt;/code&gt; class has already begun &lt;a href=&quot;https://github.com/sympy/symengine/pull/454&quot;&gt;here&lt;/a&gt;. I thank the whole &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; community for actively participating there and giving their inputs.&lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 1&lt;/h3&gt;

&lt;p&gt;Complete the &lt;code&gt;Polynomial&lt;/code&gt; class, need to implement:&lt;br/&gt;
* basic functions &lt;code&gt;__hash__&lt;/code&gt;, &lt;code&gt;__eq__&lt;/code&gt;, &lt;code&gt;compare&lt;/code&gt;, &lt;code&gt;from_dict&lt;/code&gt; like other SymEngine classes.&lt;br/&gt;
* Implement printer and tests for that.&lt;br/&gt;
* Implement &lt;code&gt;add_poly()&lt;/code&gt;, &lt;code&gt;neg_poly()&lt;/code&gt;, &lt;code&gt;sub_poly()&lt;/code&gt;, &lt;code&gt;mul_poly()&lt;/code&gt;, &lt;code&gt;eval()&lt;/code&gt; and respective tests.&lt;br/&gt;
If possible, time permits&lt;br/&gt;
* Start working on the hashtable along with &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;I am really excited as the coding period has officially started. The whole &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; community has been active on &lt;a href=&quot;https://gitter.im/sympy/symengine&quot;&gt;Gitter&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/sympy/symengine/pull/454&quot;&gt;PR&lt;/a&gt; discussion, looking forward to awesome learning experience with them.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all for now. Catch you next week.&lt;br/&gt;
&lt;strong&gt;Freilos&lt;/strong&gt;(German)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Summer Of Code with SymPy</title>
   <link href="http://sumith1896.github.io//Google-Summer-Of-Code-with-SymPy"/>
   <updated>2015-05-10T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//Google-Summer-Of-Code-with-SymPy</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/gsoc/GSOC2015.png&quot; alt=&quot;GSoC 2015&quot;&gt;&lt;/p&gt;

&lt;p&gt;Hi there! The Google Summer of Code results are out and I have been selected. As mentioned in a previous post, my project of &lt;code&gt;Implementing polynomial module in CSymPy&lt;/code&gt; has been selected and I get to work with &lt;a href=&quot;http://www.sympy.org/&quot;&gt;SymPy&lt;/a&gt; under &lt;a href=&quot;https://www.python.org/psf/&quot;&gt;Python Software Foundation.&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;The excitement&lt;/h3&gt;

&lt;p&gt;I really thank the community for accepting a freshman do a project. The community over at SymPy is so helpful and the working environment real fun that has motivated me to take up this project.&lt;br/&gt;
My mentors are &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej Čertík&lt;/a&gt; himself and &lt;a href=&quot;https://github.com/sushant-hiray&quot;&gt;Sushant Hiray&lt;/a&gt;, who is a previous GSoC-cer at SymEngine(then CSymPy).&lt;br/&gt;
I&amp;#39;d also like to congratulate &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt;, &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt;, &lt;a href=&quot;https://github.com/abinashmeher999&quot;&gt;Abinash&lt;/a&gt; for getting projects under SymEngine and all others who have been selected under SymPy and Python Software Foundations in general.&lt;br/&gt;
I am excited for the summer to follow and the great learning experience ahead.&lt;/p&gt;

&lt;h3&gt;SymPy and SymEngine&lt;/h3&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;/assets/gsoc/sympy.png&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SymPy is a Python library for symbolic mathematics. It aims to become a full-featured &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Computer_algebra_system&quot;&gt;Computer Algebra System&lt;/a&gt;&lt;/strong&gt; (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; is a fast symbolic manipulation library, written in C++.
Plans to be the fast swappable SymPy core and also a CAS on it&amp;#39;s own. We are currently writing Ruby and Julia wrappers for it too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;The Project&lt;/h3&gt;

&lt;p&gt;SymEngine currently lacks a polynomial module which is very essential in achieving SymEngine&amp;#39;s goal of being the fastest CAS ever. Having a polynomial module is a core concern and implementing a fast module also help in achieving a fast series module and other modules. Once implemented, SymEngine will be more capable as a fast optional SymPy core which we think is good to ship before 1.0 and at the same time SymEngine becomes a powerful CAS on it&amp;#39;s own.&lt;/p&gt;

&lt;p&gt;You can find the proposal &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2015-Application-Sumith-:-Implementing-polynomial-module-in-CSymPy&quot;&gt;here&lt;/a&gt; for more detailed description of the project.&lt;/p&gt;

&lt;p&gt;Looking forward to a great summer and times to follow.&lt;/p&gt;
</content>
 </entry>
 

</feed>