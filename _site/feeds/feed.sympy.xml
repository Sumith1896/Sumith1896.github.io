<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sumith</title>
 <link href="http://sumith1896.github.io//atom.xml" rel="self"/>
 <link href="http://sumith1896.github.io//"/>
 <updated>2015-10-21T13:05:06+00:00</updated>
 <id>http://sumith1896.github.io/</id>
 <author>
   <name>Sumith</name>
   <email>sumith1896@gmail.com</email>
 </author>

 
 <entry>
   <title>SymPy at PyCon India 2015</title>
   <link href="http://sumith1896.github.io//SymPy-at-PyCon-India-2015"/>
   <updated>2015-10-21T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//SymPy-at-PyCon-India-2015</id>
   <content type="html">&lt;h3&gt;The excitement&lt;/h3&gt;

&lt;p&gt;People travelling from all over the country(and outside!) to Bangalore for a conference on a weekend, Yay! &lt;br/&gt;
We were really excited about the workshop and devsprint that the SymPy team was about to deliver. More so excited we were about the fact that we will finally be meeting one another.&lt;/p&gt;

&lt;h3&gt;Day 0&lt;/h3&gt;

&lt;h4&gt;DevSprint&lt;/h4&gt;

&lt;p&gt;The first day of the conference kicked off with the devsprints. That morning the whole team met up, present there were Harsh, Sudhanshu, AMiT, Sartaj, Shivam and Sumith . Abinash couldn&amp;#39;t make it but he was there in spirit :) &lt;br/&gt; We all got our awesome SymPy tees and stickers, thanks to AMiT. &lt;br/&gt;
Having got alloted mentoring space in the  devsprint, basic introduction of SymPy was given by Sumith. Some interesting mentoring spaces were CPython by Kushal Das, Data Science by Bargava. The whole list is &lt;a href=&quot;https://in.pycon.org/cfp/pycon-india-dev-sprint-2015/proposals/&quot;&gt;here&lt;/a&gt; &lt;br/&gt;
We got the participants started off with setting up the development workflow of SymPy and then they started working on the internals. We alloted bugs to many and directed them to the solution. Sadly, not many issues could alloted or closed due to the really poor internet connection at the conference hall but it was cool interacting with the enthusiasts. We also happened to meet Saurabh Jha, a contributor to SymPy who had worked on Linear Algebra and he helped us out with the devsprint.&lt;/p&gt;

&lt;h4&gt;Workshop&lt;/h4&gt;

&lt;p&gt;The workshops ran in two and a half hour slot. This was conducted by Harsh, Sudhanshu, AMiT and Sumith. &lt;br/&gt;
Sumith started off with introduction to SymPy. Then we spent some helping everyone setup their systems with SymPy and IPython notebooks, even though prior instructions were given, we had to do this so as to get everyone on level ground. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Harsh took first half of the content and exercises &lt;br/&gt;
Sudhanshu took the second half, while AMiT and Sumith were helping out the participants with their queries. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/workshop1.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;p&gt;We distributed t-shirts to all the participants at the end. Thanks to all those who participated, we had an awesome time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/workshop2.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;p&gt;Day 0 ended with all of us wrapping off the devsprint. &lt;br/&gt;
After having dinner together, everybody headed back looking forward to the coming two days of the conference.&lt;/p&gt;

&lt;h3&gt;Day 1&lt;/h3&gt;

&lt;p&gt;Day 1 started off with a keynote by Dr Ajith Kumar B.P followed by multiple talks and lightning talks. &lt;br/&gt;
More interesting than the scheduled talks were the conversations that we had with people present in the conference. Exchanging views, discussing on a common point of interest was surely one of the best experience that I had.&lt;/p&gt;

&lt;h4&gt;Lightning talk&lt;/h4&gt;

&lt;p&gt;Shivam delivered a lightning talk titled &lt;code&gt;Python can be fast&lt;/code&gt;. Here, he stressed on the fact that implementing correct data structures is important and Python is not always to be blamed. He gave relevant examples from his summers work at SymPy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/lightningtalk.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;p&gt;By this point, we had reached considerable audience in the conference and lot of them were really interested in SymPy. We had a lot of younger participants who were enthusiastic about SymPy as it participates in GSoC, some of them also sent in patches.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Hacking sympy with &lt;a href=&quot;https://twitter.com/abraarsyed01&quot;&gt;@abraarsyed01&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ethcelon&quot;&gt;@ethcelon&lt;/a&gt;&lt;/p&gt;&amp;mdash; Devyani Kota(divs) (@Devyani_kush) &lt;a href=&quot;https://twitter.com/Devyani_kush/status/650565162584268800&quot;&gt;October 4, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;p&gt;Day 2 started off with a keynote by Nicholas H.Tollervey.&lt;/p&gt;

&lt;h4&gt;Talk&lt;/h4&gt;

&lt;p&gt;Sumith delivered a talk titled &lt;code&gt;SymEngine: The future fast core of computer algebra systems&lt;/code&gt;. The content included SymPy, SymEngine and the interface. Some light was shed on Python wrappers to C++ code. Thanks to all the audience present there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/talk.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;p&gt;As the day was closing in, Harsh and Shivam had to leave to catch their flights.&lt;/p&gt;

&lt;h4&gt;Open Space&lt;/h4&gt;

&lt;p&gt;After multiple people requesting to help them get started with SymPy, we decided to conduct an open space. &lt;br/&gt;
Open spaces are a way for people to come together to talk about topics, ideas or whatever they want. All people had to do is just show up :) Present there were Sudhanshu, Sartaj, AMiT and Sumith. Sartaj luckily came up with a &lt;code&gt;solveset&lt;/code&gt; bug. We had a live show of how bug-fixing is done. Filing an issue, fixing the code, writing tests and sending in a PR was all demonstrated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/openspace.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;Conferences are the perfect place to discuss and share knowledge and ideas. The people present there were experts in their area of interests and conversations with them is a cool experience. Meeting the team was something that we were looking forward right from the start. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/team1.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;p&gt;Missing Sartaj and Abinash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon2015/team2.jpg&quot; alt=&quot;PyCon&quot;&gt;&lt;/p&gt;

&lt;p&gt;Discussing SymPy and the gossips in person is a different experience altogether. I&amp;#39;ll make sure to attend all the conference that I possibly can from hereon. &lt;/p&gt;

&lt;p&gt;Thanks for the reading &lt;br/&gt;
Be back for more &lt;br/&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC - Wrapping Up</title>
   <link href="http://sumith1896.github.io//GSoC-Wrapping-Up"/>
   <updated>2015-08-21T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Wrapping-Up</id>
   <content type="html">&lt;p&gt;From not knowing anything considerable in programming and open source to reaching this level, has been a wonderful ride. Google Summer of Code has been full of ups and downs but none the less exhilarating. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Didn&amp;#39;t even know at the time of my &lt;a href=&quot;https://github.com/sympy/symengine/commit/f5243c034953efa228c708e97668a932dc216e37&quot;&gt;first patch&lt;/a&gt; that I would be so closely associated to SymEngine and the team members just a few months down the line.&lt;/p&gt;

&lt;p&gt;After a couple of bug fixes, my first major contribution came in as the &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/symengine/polynomial.cpp&quot;&gt;&lt;code&gt;UnivariatePolynomial&lt;/code&gt;&lt;/a&gt; class. The biggest challenge here was implementing multiplication using Kronecker&amp;#39;s trick. This was my first experience of implementing an algorithm from a &lt;a href=&quot;http://www.cs.berkeley.edu/%7Efateman/papers/polysbyGMP.pdf&quot;&gt;paper&lt;/a&gt;. The &lt;code&gt;UnivariatePolynomial&lt;/code&gt; class shaped up really well, there are minor improvements that can be made and some optimizations that could be done. But standalone, it is a fully functional class.&lt;/p&gt;

&lt;p&gt;Once this was done, my next aim was to optimize multiplication to reach &lt;code&gt;Piranha&lt;/code&gt;&amp;#39;s speed. This was a very enriching period and the discussions with the team members and &lt;a href=&quot;https://github.com/bluescarni&quot;&gt;Francesco&lt;/a&gt; was a great learning experience. En route, I also got a chance to explore &lt;code&gt;Piranha&lt;/code&gt; under the hood and trouble Francesco for reasoning why certain things were the way they. End of this, we were able to hit &lt;code&gt;Piranha&lt;/code&gt;&amp;#39;s speed. I remember I was the happiest I had been in days.&lt;/p&gt;

&lt;p&gt;Once we hit the lower level speed, we decided to hard-depend on &lt;code&gt;Piranha&lt;/code&gt; for &lt;code&gt;Polynomial&lt;/code&gt;. This meant adding &lt;code&gt;Piranha&lt;/code&gt; as SymEngine dependence. Here I had to learnt how to write and wrote &lt;code&gt;CMake&lt;/code&gt; files as well as setting up Piranha testing in &lt;code&gt;Travis&lt;/code&gt; meant writing &lt;code&gt;shell&lt;/code&gt; and &lt;code&gt;CI&lt;/code&gt; scripts. We faced a problem here, resolution to which meant implementing &lt;code&gt;Catch&lt;/code&gt; as a testing framework for &lt;code&gt;SymEngine&lt;/code&gt;. &lt;code&gt;Catch&lt;/code&gt; is an awesome library and community is very pleasant. Implementing this was a fun work too.
Also the high level value class &lt;code&gt;Expression&lt;/code&gt; was implemented in &lt;code&gt;SymEngine&lt;/code&gt;, mostly taken from Francesco&amp;#39;s work.&lt;/p&gt;

&lt;p&gt;I then started writing the &lt;code&gt;Polynomial&lt;/code&gt; class, most of the work is done here(&lt;a href=&quot;https://github.com/sympy/symengine/pull/597&quot;&gt;597&lt;/a&gt;). But the design is not very well thought of. I say this because once ready this can only support integer(ZZ) domain. But we will also need rational(QQ) and expression(EX). The code will be of much use but we have been discussing a much cleaner implementation with &lt;code&gt;Ring&lt;/code&gt; class. Most of the progress and the new design decisions are being documented &lt;a href=&quot;https://github.com/sympy/symengine/wiki/En-route-to-Polynomial&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second half has been really rough, with the university running. Ondrej has been really patient with me, I thank him for that. The bond that I made with him through mails, technical and non technical, has really grown strong. He has allowed me to continue the work the &lt;code&gt;Polynomial&lt;/code&gt; and implement more details and algorithms in future. I am looking forward to that as long term association is an amazing thing and I am proud to be responsible for the &lt;strong&gt;&lt;code&gt;Polynomial module in SymEngine&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I am indebted to my mentor &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej Certik&lt;/a&gt; and all the &lt;a href=&quot;https://gitter.im/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; and &lt;a href=&quot;https://gitter.im/sympy/sympy&quot;&gt;SymPy&lt;/a&gt; developers who were ever ready to help and answer my silliest of questions. It’s an amazing community and they are really very helpful and always appreciated even the smallest of my contributions. The best part of SymEngine is you know contributors one to one and it is like a huge family of learners. I am looking forward to meeting the team (atleast SymPy India in near future).&lt;/p&gt;

&lt;p&gt;Google Summer of Code has been one exhilarating journey. I don&amp;#39;t know if I was a good programmer then or a good programmer now but I can say that I am a better programmer now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is just the beginning of the ride, GSoC a stepping stone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There will be blog posts coming here, so stay tuned. Till then, &lt;br/&gt;
&lt;strong&gt;Bye&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 10 and 11</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-10-&-11"/>
   <updated>2015-08-16T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-10-&-11</id>
   <content type="html">&lt;p&gt;Hello all. Here are the most recent developments in the Polynomial wrappers.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Polynomial wrappers was using &lt;code&gt;piranha::hash_set&lt;/code&gt; as the &lt;code&gt;Polynomial&lt;/code&gt; wrappers, hence when there was no &lt;code&gt;Piranha&lt;/code&gt; as a dependence, the &lt;code&gt;Polynomial&lt;/code&gt; wouldn&amp;#39;t compile. The fix to this was to use &lt;code&gt;std::unordered_set&lt;/code&gt; with &lt;code&gt;-DWITH_PIRANHA=no&lt;/code&gt; so that there would be atleast a slow version available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another issue was Travis testing of &lt;code&gt;Polynomial&lt;/code&gt;. Since we depend on &lt;code&gt;Piranha&lt;/code&gt;, we had to setup Travis testing with &lt;code&gt;Piranha&lt;/code&gt; included and &lt;code&gt;Polynomial&lt;/code&gt; tests run. This was done in the merged PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/585&quot;&gt;585&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we get the &lt;code&gt;Polynomial&lt;/code&gt; merged we have to add &lt;code&gt;mul_poly&lt;/code&gt;, improve printing, and test exhaustively. The &lt;code&gt;mul_poly&lt;/code&gt; is ready &lt;a href=&quot;https://github.com/shivamvats/symengine/pull/4&quot;&gt;here&lt;/a&gt;, will be merged once more tests are prepared.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;code&gt;mul_poly&lt;/code&gt;, previously we never checked the variables corresponding to the &lt;code&gt;hash_set&lt;/code&gt;s, which implies you could only multiply a &lt;code&gt;n&lt;/code&gt; variable polynomial with another &lt;code&gt;n&lt;/code&gt; variable polynomial with the variable symbols same in both. When the variables of two hash_sets are different, a work around would be needed. This would result in slow down if done directly.&lt;/p&gt;

&lt;p&gt;As suggested by &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt;, &lt;code&gt;mul_poly&lt;/code&gt; now calls two functions &lt;code&gt;_normalize_mul&lt;/code&gt; and &lt;code&gt;_mul_hashest&lt;/code&gt;. Here &lt;code&gt;_noramlize_mul&lt;/code&gt; sees to it that the &lt;code&gt;hash_set&lt;/code&gt;s satisfy the afore mentioned criteria and then &lt;code&gt;_mul_hashset&lt;/code&gt; operates  &lt;br/&gt;
For example, say &lt;code&gt;mul_poly&lt;/code&gt; is called,
then &lt;code&gt;_normalize_mul&lt;/code&gt; converts &lt;code&gt;{1, 2, 3}&lt;/code&gt; of &lt;code&gt;x, y, z&lt;/code&gt; and &lt;code&gt;{4, 5, 6}&lt;/code&gt; of &lt;code&gt;p, q, r&lt;/code&gt; to &lt;code&gt;{1, 2, 3, 0, 0, 0}&lt;/code&gt; and &lt;code&gt;{0, 0, 0, 4, 5, 6}&lt;/code&gt;
and &lt;code&gt;_mul_hashset&lt;/code&gt; multiplies the two &lt;code&gt;hash_set&lt;/code&gt;. The speed of benchmarks determined by &lt;code&gt;_mul_hashset&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The printing needs improvement. As of now the polynomial &lt;code&gt;2*x + 2*y&lt;/code&gt; gets printed as &lt;code&gt;2*y**1*x**0 + 2*y**0*x**1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not all that was planned could be completed this summers, mostly because of my hectic schedule after the vacations ended and institure began. I am planning to work after the program ends too, when the workload eases. As the final deadline week of GSoC is coming up, I need to ensure at least the PRs on hold gets merged.I am planning to continue after the period ends so as &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all I have &lt;br/&gt;
&lt;strong&gt;See ya&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 9</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-9"/>
   <updated>2015-07-24T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-9</id>
   <content type="html">&lt;p&gt;Hello all. Last week has been rough, here&amp;#39;s what I could do.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;The printing now works, hence I could test them. Due to that we could even test both the constructors, one from &lt;code&gt;hash_set&lt;/code&gt; and other from &lt;code&gt;Basic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Polynomial wrappers PR, we need to get in quick, our highest priority.&lt;/p&gt;

&lt;p&gt;We need to make the methods more robust, we plan to get it in this weekend. &lt;br/&gt;
Once this is in, &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt; can start writing function expansions.&lt;/p&gt;

&lt;p&gt;I have also couple of other tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;std::unordered_set&lt;/code&gt; so that we can have something even when there is no Piranha as dependency. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;mpz_class&lt;/code&gt; with &lt;code&gt;piranha::integer&lt;/code&gt; throughout SymEngine and checkout benchmarks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I intend to get Polynomial in this weekend because I get free on weekends :) &lt;br/&gt;
As there are only 3-4 weeks remaining, I need to buck up.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all I have &lt;br/&gt;
&lt;strong&gt;Bidāẏa&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 8</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-8"/>
   <updated>2015-07-17T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-8</id>
   <content type="html">&lt;p&gt;Hello. Short time since my last post. Here&amp;#39;s my report since then.&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;I have continued my work on the Polynomial wrappers.&lt;/p&gt;

&lt;p&gt;Constructors from &lt;code&gt;hash_set&lt;/code&gt; and &lt;code&gt;Basic&lt;/code&gt; have been developed and pushed up. Printing has also been pushed. I&amp;#39;m currently writing tests for both, they&amp;#39;ll be ready soon.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;hash_set_eq()&lt;/code&gt; and &lt;code&gt;hash_set_compare()&lt;/code&gt; were developed, we realised that there were many functions in &lt;code&gt;*_eq()&lt;/code&gt; and &lt;code&gt;*_compare()&lt;/code&gt; form with repeated logic, the idea was to templatize them which &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt; did in his PR &lt;a href=&quot;https://github.com/sympy/symengine/pull/533&quot;&gt;#533&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Solution to worry of slow compilation was chalked which I wish to try in the coming week, using &lt;code&gt;std::unique_ptr&lt;/code&gt; to a &lt;code&gt;hash_set&lt;/code&gt;, instead of a straight &lt;code&gt;hash_set&lt;/code&gt;. Hence not necessary to know the full definition of &lt;code&gt;hash_set&lt;/code&gt; in the header. I&amp;#39;ve been reading relevant material, known as &lt;code&gt;PIMPL&lt;/code&gt; idiom.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt; &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/511&quot;&gt;#511&lt;/a&gt; - Polynomial Wrapper &lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 9&lt;/h3&gt;

&lt;p&gt;I wish to develop the  &lt;code&gt;Polynomial&lt;/code&gt; wrappers further in the following order. &lt;br/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructors and basic methods, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;, etc, working with proper tests. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Solve the problem of slow compilation times. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;As mentioned previously, use standard library alternates to Piranha constructs so that we can have something even when there is no Piranha as dependency. &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the institute began, the times have been rough. Hoping everything falls in place. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Oh by the way, &lt;a href=&quot;http://www.sympy.org/en/index.html&quot;&gt;SymPy&lt;/a&gt; will be present (and represented heavily) at &lt;a href=&quot;https://in.pycon.org/2015/&quot;&gt;PyCon India 2015&lt;/a&gt;. We sent in the content and final proposal for review last week. Have a look at the website for our proposal &lt;a href=&quot;http://iamit.in/sympy-pycon/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all this week. &lt;br/&gt;
&lt;strong&gt;sayōnara&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 7</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-7"/>
   <updated>2015-07-13T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-7</id>
   <content type="html">&lt;p&gt;Hello. Sorry for the really late post. As I was moving from home to Mumbai back and also part of the grading team of International Physics Olympiad(IPhO), I could not contribute as much as I had thought I could. Here is what I have for this week.&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Expression&lt;/code&gt; class was built upon the initial works of Francesco. I made a SymEngine patch with his as an initial commit. We now have a top-level value class.&lt;/p&gt;

&lt;p&gt;The slowdowns finally got tackled. It was Piranha that needed amendment. The slowdown, as discussed previously, was due to the class &lt;code&gt;thread_pool&lt;/code&gt;. This was resolved was templatizing &lt;code&gt;thread_pool&lt;/code&gt; i.e. replace &lt;code&gt;class thread_pool: private detail::thread_pool_base&amp;lt;&amp;gt;&lt;/code&gt; with &lt;code&gt;template &amp;lt;typename = void&amp;gt; class thread_pool_: private detail::thread_pool_base&amp;lt;&amp;gt;&lt;/code&gt;. This basically saw to it that inclusion of individual headers. Including single &lt;code&gt;piranha.hpp&lt;/code&gt; still had this problem. The problem was &lt;code&gt;piranha.hpp&lt;/code&gt; includes &lt;code&gt;settings.hpp&lt;/code&gt;, which in turn defines a non-template function called &lt;code&gt;set_n_threads()&lt;/code&gt; which internally invokes the thread pool. This was resolved by a similar fix, the &lt;code&gt;setting&lt;/code&gt; class to &lt;code&gt;&amp;lt;typename = void&amp;gt; class settings_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Many things were reported until now, hence &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt; suggested a documentation of all the decisions taken. The wiki page, &lt;a href=&quot;https://github.com/sympy/symengine/wiki/En-route-to-Polynomial&quot;&gt;En route to Polynomial&lt;/a&gt; was hence made.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt; &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/511&quot;&gt;#511&lt;/a&gt; - Polynomial Wrapper &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merged&lt;/strong&gt; &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/512&quot;&gt;#512&lt;/a&gt; - Add Francesco to AUTHORS &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/500&quot;&gt;#500&lt;/a&gt; - Expression wrapper. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; &lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/wiki/En-route-to-Polynomial&quot;&gt;En route to Polynomial&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 8&lt;/h3&gt;

&lt;p&gt;Get the &lt;code&gt;Polynomial&lt;/code&gt; wrapper merged.&lt;/p&gt;

&lt;p&gt;Points to be noted: &lt;br/&gt;
* Use standard library alternates to Piranha constructs so that we can have something even when there is no Piranha as dependency. &lt;br/&gt;
* Basic class in, so that &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt; can start some work in SymEngine. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;I am thankful to &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt; and the &lt;code&gt;SymEngine&lt;/code&gt; team for bearing with my delays. I hope I can compensate in the coming week. &lt;/p&gt;

&lt;p&gt;That&amp;#39;s all this week. &lt;br/&gt;
&lt;strong&gt;Adéu&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 6</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-6"/>
   <updated>2015-07-03T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-6</id>
   <content type="html">&lt;p&gt;Hello, received a mail few minutes into typing this, passed the midterm review successfully :) &lt;br/&gt;
Just left me wondering how do these guys process so many evaluations so quickly. I do have to confirm with &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt; about this. &lt;br/&gt;
Anyways, the project goes on and here is my this week&amp;#39;s summary. &lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;SymEngine&lt;/code&gt; successfully moved to using &lt;code&gt;Catch&lt;/code&gt; as a testing framework. &lt;/p&gt;

&lt;p&gt;The travis builds for clang were breaking, this let me to play around with travis and clang builds to fix this issue. The linux clang build used to break because we used to mix-up and link libraries like &lt;code&gt;GMP&lt;/code&gt; compiled with different standard libraries.  &lt;br/&gt;
Thanks to &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt; for lending a helping hand and fixing it in his PR.&lt;/p&gt;

&lt;p&gt;Next task to make &lt;code&gt;SYMENGINE_ASSERT&lt;/code&gt; not use standard &lt;code&gt;assert()&lt;/code&gt;, hence I wrote my custom assert which simulates the internal &lt;code&gt;assert&lt;/code&gt;.  &lt;br/&gt;
Now we could add the &lt;code&gt;DNDEBUG&lt;/code&gt; as a release flag when &lt;code&gt;Piranha&lt;/code&gt; is a dependence, this was also done.&lt;/p&gt;

&lt;p&gt;Started work on &lt;code&gt;Expression&lt;/code&gt; wrapper, PR that starts off from Francesco&amp;#39;s work sent in.&lt;/p&gt;

&lt;p&gt;Investigated the slow down in benchmarks that I have been reporting in the last couple of posts. Using &lt;code&gt;git commit&lt;/code&gt;(amazing tool, good to see binary search in action!), the first bad &lt;a href=&quot;https://github.com/Sumith1896/csympy/commit/35f384a484315efbb900ec4ec0b0eb97e791c193&quot;&gt;commit&lt;/a&gt; was tracked. We realized that the inclusion of &lt;code&gt;piranha.hpp&lt;/code&gt; header caused the slowdown and was resolved by using &lt;code&gt;mp_integer.hpp&lt;/code&gt;, just the requirement header.  &lt;br/&gt;
With immense help of &lt;a href=&quot;https://github.com/bluescarni&quot;&gt;Franceso&lt;/a&gt;, the problem was cornered to this: &lt;br/&gt;
* Inclusion of &lt;code&gt;thread_pool&lt;/code&gt; leads to the slowdown, a global variable that it declares to be specific. &lt;br/&gt;
* In general a multi-threaded application may result in some compiler optimizations going off, hence slowdown. &lt;br/&gt;
* Since this benchmark is memory allocation intensive, another speculation is that compiler allocates memory differently. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;This SO &lt;a href=&quot;http://stackoverflow.com/questions/31212943/performance-cost-of-threading-constructs-missed-optimisations-and-memory-alloca&quot;&gt;question&lt;/a&gt; asked by &lt;a href=&quot;https://github.com/bluescarni&quot;&gt;@bluescarni&lt;/a&gt; should lead to very interesting developments. &lt;/p&gt;

&lt;p&gt;We have to investigate this problem and get it sorted. Not only because we depend on &lt;code&gt;Piranha&lt;/code&gt;, we might also have multi-threading in &lt;code&gt;SymEngine&lt;/code&gt; later too.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;No benchmarking was done this week. &lt;br/&gt;
Here is my PR reports. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt; &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/500&quot;&gt;#500&lt;/a&gt; - Expression Wrapper &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merged&lt;/strong&gt; &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/493&quot;&gt;#493&lt;/a&gt; - The PR with &lt;code&gt;Catch&lt;/code&gt; got merged. &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/498&quot;&gt;#498&lt;/a&gt; - Made &lt;code&gt;SYMENGINE_ASSERT&lt;/code&gt; use custom assert instead of &lt;code&gt;assert()&lt;/code&gt; and &lt;code&gt;DNDEBUG&lt;/code&gt; as a release flag with &lt;code&gt;PIRANHA&lt;/code&gt;. &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/502&quot;&gt;#502&lt;/a&gt; - Make &lt;code&gt;poly_mul&lt;/code&gt; used &lt;code&gt;mpz_addmul&lt;/code&gt; (FMA), nice speedup of &lt;code&gt;expand2b&lt;/code&gt;.
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/496&quot;&gt;#496&lt;/a&gt; - En route to fixing &lt;code&gt;SYMENGINE_ASSERT&lt;/code&gt; led to a minor fix in one of the assert statements. &lt;br/&gt;
* &lt;a href=&quot;https://github.com/sympy/symengine/pull/491&quot;&gt;#491&lt;/a&gt; - Minor fix in compiler choice documentation.&lt;/p&gt;

&lt;h3&gt;Targets for Week 7&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get the &lt;code&gt;Expression&lt;/code&gt; class merged. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Investigate and fix the slow-downs. &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of tasks can be finalized in later discussion with &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all this week. &lt;br/&gt;
&lt;strong&gt;Ciao&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 5</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-5"/>
   <updated>2015-06-26T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-5</id>
   <content type="html">&lt;p&gt;Hello, this post contains the fourth report of my GSoC progress. We hit &lt;code&gt;Piranha&lt;/code&gt;&amp;#39;s speed,
the highlight of this week. &lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;We were able to reach &lt;code&gt;Piranha&lt;/code&gt;&amp;#39;s speed. At an average &lt;code&gt;14-ish ms&lt;/code&gt; to the benchmark, we are happy enough (still can be improved) to start wrapping this low-level implementation to a &lt;code&gt;Polynomial&lt;/code&gt; class. Last week I had reported speed &lt;code&gt;23ms&lt;/code&gt; and this week we are better. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;We had missed out a compiler flag, &lt;code&gt;DNDEBUG&lt;/code&gt; to indicate &lt;code&gt;Release&lt;/code&gt; mode of &lt;code&gt;Piranha&lt;/code&gt; leading to slow-down, &lt;a href=&quot;https://github.com/sympy/symengine/issues/482&quot;&gt;#482&lt;/a&gt;. &lt;br/&gt;
Adding this compiler flag means we should not be using &lt;code&gt;assert&lt;/code&gt; statement, which &lt;code&gt;SymEngine&lt;/code&gt; does in &lt;code&gt;SYMENGINE_ASSERT&lt;/code&gt; and test files too. These had to be sorted out if &lt;code&gt;Piranha&lt;/code&gt; were to be a hard dependency of &lt;code&gt;SymEngine&lt;/code&gt;&amp;#39;s polynomial module. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Hence, the issue of moving the tests suite from &lt;code&gt;assert&lt;/code&gt;s to a well-developed test framework came up again, &lt;a href=&quot;https://github.com/sympy/symengine/issues/282&quot;&gt;#282&lt;/a&gt;. We explored a couple, but &lt;code&gt;Catch&lt;/code&gt; still seemed to be the best option. &lt;br/&gt;
&lt;code&gt;Catch&lt;/code&gt; was implemented, which is a benefit to &lt;code&gt;SymEngine&lt;/code&gt; in the long run too. &lt;br/&gt;
As for the &lt;code&gt;SYMENGINE_ASSERT&lt;/code&gt;, we decided to change our macro to raise an exception or just abort the program. &lt;br/&gt;
&lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt; is a very good tool. We thank &lt;a href=&quot;https://github.com/philsquared&quot;&gt;Phil Nash&lt;/a&gt; and all the contributors for making it.&lt;/p&gt;

&lt;p&gt;Next up, wrapping into &lt;code&gt;Polynomial&lt;/code&gt;. &lt;br/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need some functionality to convert a &lt;code&gt;SymEngine&lt;/code&gt; expression(&lt;code&gt;Basic&lt;/code&gt;) into one of &lt;code&gt;hashset&lt;/code&gt; representations directly. Now I convert &lt;code&gt;basic&lt;/code&gt; to &lt;code&gt;poly&lt;/code&gt; and then to &lt;code&gt;hashset&lt;/code&gt; as just getting the speed right was the issue. &lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Domains of coefficients need to be thought of. &lt;code&gt;SymPy&lt;/code&gt; and &lt;code&gt;Sage&lt;/code&gt; will be need to looked into and their APIs need to be studied. We need &lt;code&gt;ZZ&lt;/code&gt;, &lt;code&gt;QQ&lt;/code&gt; and &lt;code&gt;EX&lt;/code&gt;, the work for &lt;code&gt;EX&lt;/code&gt; has been done by &lt;a href=&quot;https://github.com/bluescarni&quot;&gt;Francesco Biscani&lt;/a&gt;, this will be patched for the latest master and commited in his name.
There could also be an automatic mode, which figures out the fastest representation for the given expression, at the price of a little slower conversion, as it needs to traverse the expression to figure out what representation fits. &lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt; to &lt;code&gt;packed&lt;/code&gt; conversion when exponents don&amp;#39;t fit. Also &lt;code&gt;encode&lt;/code&gt; supports signed ints which is a boon to us, as we don&amp;#39;t have to worry about negative exponents. For &lt;code&gt;rational&lt;/code&gt; exponents we use tuple. &lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still haven&amp;#39;t figured out the reason for slow down of &lt;code&gt;expand2&lt;/code&gt; and &lt;code&gt;expand2b&lt;/code&gt; in my &lt;code&gt;packint&lt;/code&gt; branch. I have been suggested to use &lt;code&gt;git bisect&lt;/code&gt;. Will do next week.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;expand2d&lt;/code&gt; results:&lt;/p&gt;

&lt;p&gt;Result of 10 execution:  &lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;15ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;15ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;15ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;14ms&lt;/code&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Maximum: 15ms &lt;br/&gt;
Minimum: 14ms &lt;br/&gt;
Average: 14.3ms &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;evaluate_sparsity()&lt;/code&gt; gave the following result for the &lt;code&gt;hash_set&lt;/code&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0,11488&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;1,3605&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;2,1206&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;3,85&lt;/code&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Piranha&lt;/code&gt; has the following results &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Average: 13.421ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;Maximum: 13.875ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;Minimum: 12.964ms&lt;/code&gt;  &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;A more detailed report of benchmarks and comparisons can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Benchmark-results-expand2b,-SymEngine&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A minor PR where MPFR was added as a Piranha dependency, &lt;a href=&quot;https://github.com/sympy/symengine/pull/472&quot;&gt;472&lt;/a&gt; was merged. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Another PR in which the tests where moved to &lt;code&gt;Catch&lt;/code&gt; is good to play with and merge, minor build nits remaining, &lt;a href=&quot;https://github.com/sympy/symengine/pull/484&quot;&gt;484&lt;/a&gt;. &lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Figure out the reason for &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Benchmark-results-expand2b,-SymEngine#why-is-there-a-slowdown-in-packint-branch-for-expand-and-expand2b&quot;&gt;slow down&lt;/a&gt; in benchmarks, fix that. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;SYMENGINE_ASSERT&lt;/code&gt; &lt;a href=&quot;https://github.com/sympy/symengine/blob/bbe3c9baf653d18d37e3bfcd424e0781786098c1/symengine/symengine_assert.h#L7&quot;&gt;macro&lt;/a&gt; to raise an &lt;a href=&quot;https://github.com/sympy/symengine/blob/bbe3c9baf653d18d37e3bfcd424e0781786098c1/symengine/symengine_assert.h#L13&quot;&gt;exception&lt;/a&gt;. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;DNDEBUG&lt;/code&gt; flag for with &lt;code&gt;Piranha&lt;/code&gt; builds, as now &lt;code&gt;SymEngine&lt;/code&gt; doesn&amp;#39;t use &lt;code&gt;assert&lt;/code&gt;, close issue &lt;a href=&quot;https://github.com/sympy/symengine/issues/482&quot;&gt;#482&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Port &lt;a href=&quot;https://github.com/bluescarni&quot;&gt;&lt;code&gt;@bluescarni&lt;/code&gt;&lt;/a&gt;&amp;#39;s &lt;a href=&quot;https://github.com/sympy/symengine/compare/master...bluescarni:expression&quot;&gt;work&lt;/a&gt; of &lt;code&gt;EX&lt;/code&gt; to SymEngine. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Wrap the lower-level into &lt;code&gt;Polynomial&lt;/code&gt; for signed integer exponents in &lt;code&gt;ZZ&lt;/code&gt; domain with functionality atleast that of &lt;code&gt;UnivariatePolynomial&lt;/code&gt;. &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all this week. &lt;br/&gt;
&lt;strong&gt;Sbohem&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 3 and 4</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-3-and-4"/>
   <updated>2015-06-20T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-3-and-4</id>
   <content type="html">&lt;p&gt;Hello, this post contains the third report of my GSoC progress. At one point, I had changed the deadline from Sundays to Fridays, but I seem to be running a week late on the post names. That has been corrected now&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;We decided to replace &lt;code&gt;mpz_class&lt;/code&gt; with &lt;code&gt;piranha::integer&lt;/code&gt; for coefficients and &lt;code&gt;std::unordered_map&lt;/code&gt; with &lt;code&gt;piranha::hash_set&lt;/code&gt; for the container. We got the lower-level working with this data-structure in the last week. &lt;br/&gt;
We decided to depend on &lt;code&gt;Piranha&lt;/code&gt; for the &lt;code&gt;Polynomial&lt;/code&gt; else our module won&amp;#39;t be upto the speed we expect it to. &lt;br/&gt;
In future, we can write our hashtable and Integer as and when needed. &lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;The benchmarks results are: &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expand2b&lt;/code&gt; has: &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Average: 108.2ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;Maximum: 114ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;Minimum: 107ms&lt;/code&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;while the latest &lt;code&gt;expand2d&lt;/code&gt; has: &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Average: 23ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;Maximum: 23ms&lt;/code&gt; &lt;br/&gt;
&lt;code&gt;Minimum: 23ms&lt;/code&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;which is a nice 4-5x speed-up. &lt;br/&gt;
The code for this(experimental) can be found in &lt;a href=&quot;https://github.com/sympy/symengine/pull/470&quot;&gt;470&lt;/a&gt;. &lt;br/&gt;
A more detailed report can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Benchmark-results-expand2b,-SymEngine&quot;&gt;here&lt;/a&gt;. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;I also sent in a minor PR with some clean-ups that I felt neccessary in &lt;a href=&quot;https://github.com/sympy/symengine/pull/472&quot;&gt;472&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Targets for Week 5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wrap the the lower level into a &lt;code&gt;Polynomial&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Have the functionality of atleast the &lt;code&gt;UnivariatePolynomial&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Explore what kind of coefficients can be passed, since we have &lt;code&gt;piranha::integer&lt;/code&gt; we need to think of having &lt;code&gt;rational&lt;/code&gt; and &lt;code&gt;symbolic&lt;/code&gt; coefficients now itself.&lt;/li&gt;
&lt;li&gt;Think of various areas where &lt;code&gt;Polynomial&lt;/code&gt; class needs to integrate in SymEngine for example &lt;code&gt;expand()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all this week. &lt;br/&gt;
&lt;strong&gt;Vaarwel&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 2</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-2"/>
   <updated>2015-06-12T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-2</id>
   <content type="html">&lt;p&gt;Hello, this post contains the second report of my GSoC progress. At one point, I had changed the deadline from Sundays to Fridays, but I seem to be running a week late on the post names. Will be corrected next week.&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;We decided that instead of coding up the &lt;code&gt;Polynomial&lt;/code&gt; upfront, we try to speed up the expand2b benchmark i.e. try to nail speed at a lower level, then think of the design decisions and wrap it up into &lt;code&gt;Polynomial&lt;/code&gt; class. &lt;br/&gt;
The plan was this: &lt;br/&gt;
* Add support for &lt;code&gt;Piranha&lt;/code&gt; in &lt;code&gt;SymEngine&lt;/code&gt; CMake &lt;br/&gt;
* Implement packing of exponents and a check function to ensure it fits, use this to fasten expand2b &lt;br/&gt;
* Use Piranha&amp;#39;s integer and benchmark expand2b again &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The faster hashtable was kept for later.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/symengine/pull/464&quot;&gt;PR 464&lt;/a&gt; was merged. &lt;br/&gt;
Implements support for &lt;code&gt;Piranha&lt;/code&gt; in CMake along with it&amp;#39;s dependencies &lt;code&gt;Boost&lt;/code&gt; and &lt;code&gt;PTHREAD&lt;/code&gt;. &lt;br/&gt;
The above two dependencies come as separate CMake option as well. We feel that the &lt;code&gt;Boost&lt;/code&gt; support can be improved, that can be done at a later stage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/symengine/pull/470&quot;&gt;PR 470&lt;/a&gt; Speeding up the benchmark. &lt;br/&gt;
* The pack and check function were implemented &lt;br/&gt;
* Used &lt;code&gt;std::valarray&lt;/code&gt; instead &lt;code&gt;std::vector&lt;/code&gt;(inspired by &lt;a href=&quot;https://github.com/sympy/symengine/issues/111&quot;&gt;issue 111&lt;/a&gt;) but the benchmark slowed down, hence change was not adopted &lt;br/&gt;
* Implemented functions &lt;code&gt;poly2packed()&lt;/code&gt; and &lt;code&gt;packed2poly()&lt;/code&gt;, for converting between the two representations &lt;br/&gt;
* Implemented function &lt;code&gt;poly_mul2()&lt;/code&gt; for multiplying the packed polynomials &lt;br/&gt;
* Re-wrote &lt;code&gt;expand2b&lt;/code&gt; to use packed, now &lt;code&gt;expand2c&lt;/code&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Very nice speedup was obtained from using the packed structure, a more detailed report can be found &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Benchmark-results-expand2b,-SymEngine&quot;&gt;here&lt;/a&gt;. &lt;br/&gt;
But we are still far from &lt;code&gt;Piranha&lt;/code&gt; and we have lots to do :)&lt;/p&gt;

&lt;p&gt;Most of the week&amp;#39;s time went to learning to link libraries and writing cmake files for my own projects so that I could figure what was happening in &lt;a href=&quot;https://github.com/sympy/symengine/pull/464&quot;&gt;PR 464&lt;/a&gt;. Now I feel it was very easy a task and shouldn&amp;#39;t have consumed the time it did.&lt;/p&gt;

&lt;h3&gt;Targets for Week 3&lt;/h3&gt;

&lt;p&gt;My aim is to get all the code and optimization, possible at this level, done by next week, so that we can start wrapping in the coming weeks. &lt;br/&gt;
* Use &lt;code&gt;piranha::integer&lt;/code&gt; for coefficients, benchmark &lt;br/&gt;
* Implement switching between packed structure and tuple depending on whether exponents fit or not &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;If time permits, I want to implement a system to use &lt;code&gt;int&lt;/code&gt; for small cofficients and switch to &lt;code&gt;mpz_class&lt;/code&gt; when large.&lt;br/&gt;
We have lots to do to hit the speed that we expect.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all folks.&lt;br/&gt;
&lt;strong&gt;Au Revoir&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC Progress - Week 1</title>
   <link href="http://sumith1896.github.io//GSoC-Progress-Week-1"/>
   <updated>2015-06-05T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//GSoC-Progress-Week-1</id>
   <content type="html">&lt;p&gt;Hi again, this post contains the first report of my GSoC progress, even though it&amp;#39;s week 2. &lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;I have completed the &lt;code&gt;UnivariatePolynomial&lt;/code&gt; implementation in &lt;a href=&quot;https://github.com/sympy/symengine/pull/454&quot;&gt;PR 454&lt;/a&gt;, the PR is reviewed and merged. This &lt;code&gt;SymEngine&lt;/code&gt; class can handle univariate polynomials and can handle all the basic polynomial manipulation.&lt;/p&gt;

&lt;p&gt;The current functionality of &lt;code&gt;UnivariatePolynomial&lt;/code&gt; are:&lt;br/&gt;
* two constructors of &lt;code&gt;UnivariatePolynomial&lt;/code&gt; class, one using a &lt;code&gt;dict&lt;/code&gt; of degree to coefficient and other is using a dense vector of coefficients. Note that this implementation is sparse. &lt;br/&gt;
* printing, same output pattern as that of SymPy&lt;br/&gt;
* &lt;code&gt;from_dict&lt;/code&gt; which returns the appropriate &lt;code&gt;Basic&lt;/code&gt; type on passing the &lt;code&gt;dict&lt;/code&gt;&lt;br/&gt;
* &lt;code&gt;dict_add_term&lt;/code&gt; to add a new term to the &lt;code&gt;dict&lt;/code&gt;&lt;br/&gt;
* &lt;code&gt;max_coef()&lt;/code&gt;, &lt;code&gt;diff()&lt;/code&gt;, &lt;code&gt;eval()&lt;/code&gt; as the name suggests&lt;br/&gt;
* some bool check funtions to check specific cases like &lt;code&gt;is_zero()&lt;/code&gt;, &lt;code&gt;is_one()&lt;/code&gt;, etc.&lt;br/&gt;
* also the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;neg&lt;/code&gt; and &lt;code&gt;mul&lt;/code&gt; functions. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;What I learnt here was having a testing environment setup first speeds up the process of implementation and things go in the right direction.&lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;UnivariatePolynomial&lt;/code&gt; uses &lt;code&gt;std::map&lt;/code&gt;, I plan to switch to &lt;code&gt;std::unordered_map&lt;/code&gt; or other specialized data structures before benchmarking the class and comparing speeds so that we get a decent speed.&lt;br/&gt;
The, to be implemented, multivariate class will be called &lt;code&gt;Polynomial&lt;/code&gt;. Note that two classes are high level, because they can take part in SymPy expressions.&lt;/p&gt;

&lt;p&gt;The plan is to implement lower level classes with various data structures, as well as using Piranha. These lower level classes do not use RCP at all, thus they could be faster for some applications. The user could then call specialized classes if needed for a given application (if we implement any).&lt;/p&gt;

&lt;h3&gt;Targets for Week 2 and Week 3&lt;/h3&gt;

&lt;p&gt;First aim is to use the already implemented polynomials in &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/src/rings.cpp&quot;&gt;&lt;code&gt;rings&lt;/code&gt;&lt;/a&gt; in SymEngine, look at the &lt;a href=&quot;https://github.com/sympy/symengine/blob/master/benchmarks/expand2b.cpp&quot;&gt;expand2b&lt;/a&gt; benchmark and try to speed it up by: &lt;br/&gt;
* Making use of Piranha int &lt;br/&gt;
* Using Kronecker packing for exponents &lt;/p&gt;

&lt;p&gt;If we get satisfactory speed, we wrap it in &lt;code&gt;Polynomial&lt;/code&gt; class. This can further be optimized using our very own class Integer, where in it we switch between int and mpzclass automatically (we should use it everywhere in SymEngine instead of mpzclass) and hashmap in future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tasks&lt;/strong&gt; &lt;br/&gt;
* have an option of &lt;code&gt;Piranha&lt;/code&gt; in cmake &lt;br/&gt;
* code for packing exponents into machine int64 &lt;br/&gt;
* try to use Piranha&amp;#39;s integer to see how it performs &lt;br/&gt;
If time permits &lt;br/&gt;
* Implement faster hashmap this weekend with &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all for now. Catch you next week.&lt;br/&gt;
&lt;strong&gt;Adiós&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gearing up for GSoC</title>
   <link href="http://sumith1896.github.io//Gearing-up-for-GSoC"/>
   <updated>2015-05-25T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//Gearing-up-for-GSoC</id>
   <content type="html">&lt;p&gt;Greetings! The community bonding is officially closed now. It&amp;#39;s time for the coding period. I had promised myself a post every sunday from the 24th of May 2015 but seems like the first post is a bit late. &lt;/p&gt;

&lt;h3&gt;Community bonding&lt;/h3&gt;

&lt;p&gt;I had discussions with &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej&lt;/a&gt; and &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt; about the big tasks in hand and how to go about handling the work. In the first discussion, we also assigned ourselves the first task that needs to be completed.&lt;br/&gt;
I have to:&lt;br/&gt;
* Clean up the necessary in the &lt;a href=&quot;https://github.com/sympy/symengine/pull/406&quot;&gt;PR&lt;/a&gt; Shivam had sent during his proposal period.&lt;br/&gt;
* Implement &lt;code&gt;sub_poly()&lt;/code&gt; and &lt;code&gt;mul_poly()&lt;/code&gt; with Kronecker substitution in a clean fashion.&lt;br/&gt;
Shivam agreed to finish &lt;code&gt;ring_series&lt;/code&gt; in &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;SymPy&lt;/a&gt; which he has already started working on.&lt;br/&gt;
Also together we decided to work on a faster hashtable implementation.&lt;br/&gt;
I also discussed with &lt;a href=&quot;https://github.com/sushant-hiray&quot;&gt;Sushant&lt;/a&gt; about the structure of the current &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; and cleared my doubts there.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;As a part of community bonding, I looked to some tools that I&amp;#39;ll be using. Certain C++11 constructs, visitor pattern, etc. Even though I am not thorough with it, I think learning it as I progress with the work is the best thing to do.&lt;/p&gt;

&lt;p&gt;Regarding the work I undertook in this period, is minimal, but here they are:&lt;br/&gt;
&lt;strong&gt;Issues&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/issues/443&quot;&gt;#443&lt;/a&gt;: Documentation of SymEngine.&lt;br/&gt;
&lt;strong&gt;Pull requests&lt;/strong&gt;&lt;br/&gt;
As I read through the code I felt some clean ups necesarry which were done in &lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/pull/444&quot;&gt;#444&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/symengine/pull/438&quot;&gt;#438&lt;/a&gt;: Pending&lt;br/&gt;
&lt;a href=&quot;https://github.com/sympy/symengine/pull/451&quot;&gt;#451&lt;/a&gt;, &lt;a href=&quot;https://github.com/sympy/symengine/pull/442&quot;&gt;#442&lt;/a&gt;, &lt;a href=&quot;https://github.com/sympy/symengine/pull/441&quot;&gt;#441&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/symengine/pull/440&quot;&gt;#440&lt;/a&gt;: Merged&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;In my proposal, I had promised &lt;a href=&quot;https://github.com/bluescarni/piranha&quot;&gt;Piranha&lt;/a&gt; audit but it didn&amp;#39;t happen in such a short period due to complex code. Best way to go forward was to start work for &lt;code&gt;Polynomial&lt;/code&gt;.&lt;br/&gt;
The work regarding &lt;code&gt;Polynomial&lt;/code&gt; class has already begun &lt;a href=&quot;https://github.com/sympy/symengine/pull/454&quot;&gt;here&lt;/a&gt;. I thank the whole &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; community for actively participating there and giving their inputs.&lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 1&lt;/h3&gt;

&lt;p&gt;Complete the &lt;code&gt;Polynomial&lt;/code&gt; class, need to implement:&lt;br/&gt;
* basic functions &lt;code&gt;__hash__&lt;/code&gt;, &lt;code&gt;__eq__&lt;/code&gt;, &lt;code&gt;compare&lt;/code&gt;, &lt;code&gt;from_dict&lt;/code&gt; like other SymEngine classes.&lt;br/&gt;
* Implement printer and tests for that.&lt;br/&gt;
* Implement &lt;code&gt;add_poly()&lt;/code&gt;, &lt;code&gt;neg_poly()&lt;/code&gt;, &lt;code&gt;sub_poly()&lt;/code&gt;, &lt;code&gt;mul_poly()&lt;/code&gt;, &lt;code&gt;eval()&lt;/code&gt; and respective tests.&lt;br/&gt;
If possible, time permits&lt;br/&gt;
* Start working on the hashtable along with &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;I am really excited as the coding period has officially started. The whole &lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; community has been active on &lt;a href=&quot;https://gitter.im/sympy/symengine&quot;&gt;Gitter&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/sympy/symengine/pull/454&quot;&gt;PR&lt;/a&gt; discussion, looking forward to awesome learning experience with them.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all for now. Catch you next week.&lt;br/&gt;
&lt;strong&gt;Freilos&lt;/strong&gt;(German)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Summer Of Code with SymPy</title>
   <link href="http://sumith1896.github.io//Google-Summer-Of-Code-with-SymPy"/>
   <updated>2015-05-10T00:00:00+00:00</updated>
   <id>http://sumith1896.github.io//Google-Summer-Of-Code-with-SymPy</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/gsoc/GSOC2015.png&quot; alt=&quot;GSoC 2015&quot;&gt;&lt;/p&gt;

&lt;p&gt;Hi there! The Google Summer of Code results are out and I have been selected. As mentioned in a previous post, my project of &lt;code&gt;Implementing polynomial module in CSymPy&lt;/code&gt; has been selected and I get to work with &lt;a href=&quot;http://www.sympy.org/&quot;&gt;SymPy&lt;/a&gt; under &lt;a href=&quot;https://www.python.org/psf/&quot;&gt;Python Software Foundation.&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;The excitement&lt;/h3&gt;

&lt;p&gt;I really thank the community for accepting a freshman do a project. The community over at SymPy is so helpful and the working environment real fun that has motivated me to take up this project.&lt;br/&gt;
My mentors are &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondřej Čertík&lt;/a&gt; himself and &lt;a href=&quot;https://github.com/sushant-hiray&quot;&gt;Sushant Hiray&lt;/a&gt;, who is a previous GSoC-cer at SymEngine(then CSymPy).&lt;br/&gt;
I&amp;#39;d also like to congratulate &lt;a href=&quot;https://github.com/shivamvats&quot;&gt;Shivam&lt;/a&gt;, &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt;, &lt;a href=&quot;https://github.com/abinashmeher999&quot;&gt;Abinash&lt;/a&gt; for getting projects under SymEngine and all others who have been selected under SymPy and Python Software Foundations in general.&lt;br/&gt;
I am excited for the summer to follow and the great learning experience ahead.&lt;/p&gt;

&lt;h3&gt;SymPy and SymEngine&lt;/h3&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;/assets/gsoc/sympy.png&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SymPy is a Python library for symbolic mathematics. It aims to become a full-featured &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Computer_algebra_system&quot;&gt;Computer Algebra System&lt;/a&gt;&lt;/strong&gt; (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/symengine&quot;&gt;SymEngine&lt;/a&gt; is a fast symbolic manipulation library, written in C++.
Plans to be the fast swappable SymPy core and also a CAS on it&amp;#39;s own. We are currently writing Ruby and Julia wrappers for it too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;The Project&lt;/h3&gt;

&lt;p&gt;SymEngine currently lacks a polynomial module which is very essential in achieving SymEngine&amp;#39;s goal of being the fastest CAS ever. Having a polynomial module is a core concern and implementing a fast module also help in achieving a fast series module and other modules. Once implemented, SymEngine will be more capable as a fast optional SymPy core which we think is good to ship before 1.0 and at the same time SymEngine becomes a powerful CAS on it&amp;#39;s own.&lt;/p&gt;

&lt;p&gt;You can find the proposal &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2015-Application-Sumith-:-Implementing-polynomial-module-in-CSymPy&quot;&gt;here&lt;/a&gt; for more detailed description of the project.&lt;/p&gt;

&lt;p&gt;Looking forward to a great summer and times to follow.&lt;/p&gt;
</content>
 </entry>
 

</feed>